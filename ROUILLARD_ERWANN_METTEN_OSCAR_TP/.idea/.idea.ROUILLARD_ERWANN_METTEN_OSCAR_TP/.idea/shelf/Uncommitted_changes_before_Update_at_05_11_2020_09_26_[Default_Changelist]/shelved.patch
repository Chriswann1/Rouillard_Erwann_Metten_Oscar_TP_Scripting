Index: ROUILLARD_ERWANN_METTEN_OSCAR_TP/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\n//INDEV = In development\r\n\r\nnamespace ROUILLARD_ERWANN_METTEN_OSCAR_TP\r\n{\r\n    internal class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            char charcutter = 'f';\r\n            \r\n            string sentence = \"Le fleuve fait le bonheur des enfants\";\r\n            string sentencereverse = \"la vie est un long fleuve tranquille\";\r\n            \r\n            int[] entiers = { 8, 6, 48, 3, 50 };\r\n            \r\n            List<int> Entiers1 = new List<int> {5,7,9,63,65,41};\r\n            List<int> Entiers2 = new List<int> {9,3,7,20,75,96,43,85};\r\n            List<int> Entiers3 = new List<int> {1,25,45,5,7,9,63,65,41,1,25,45,5,7,9,63,65,41,1,25,45,1,5,7,9,63,65,41,1,25,45,5,7,9,63,65,41,1,25,45,5,7,9,63,65,41,1,25,45,1};\r\n            \r\n            Console.WriteLine(\"--------------> Sortie Exo 1 <--------------\");\r\n            for (int i = 0; i < CutString(charcutter, sentence).Count; i++) //Permet d'afficher tout le tableau de la 1ère question\r\n            {\r\n                Console.WriteLine(CutString(charcutter, sentence)[i]);\r\n            }\r\n\r\n\r\n            Console.WriteLine(\"--------------> Sortie Exo 2 <--------------\");\r\n            Console.WriteLine(ReverseSentence(sentencereverse)); //Test 2ème question\r\n            \r\n            Console.WriteLine(\"--------------> Sortie Exo 3 <--------------\");\r\n            Console.WriteLine(ReverseWordNotSentence(sentencereverse)); //Test 3ème question\r\n\r\n            Console.WriteLine(\"--------------> Sortie Exo 4 <--------------\");\r\n            Console.WriteLine(ReverseSentenceNotWord(sentence)); //Test 4ème question\r\n\r\n            \r\n            \r\n            Console.WriteLine(\"--------------> Sortie Exo 5 <--------------\");\r\n            Console.WriteLine(\"L'index le plus petit est\" + SmallestIndex(entiers)); // Test 5ème question\r\n            \r\n            Console.WriteLine(\"--------------> Sortie Exo 6 <--------------\");\r\n            for (int i = 0; i < SortBubble(entiers).Length; i++) //Permet d'afficher tout le tableau de la 6ème question\r\n            {\r\n                Console.WriteLine(SortBubble(entiers)[i]);\r\n            }\r\n            \r\n            Console.WriteLine(\"--------------> Sortie Exo 7 <--------------\");\r\n            for (int i = 0; i < InsertionSort(entiers).Length; i++)  // Permet d'afficher tout le tableau de la 7ème question\r\n            {\r\n                Console.WriteLine(InsertionSort(entiers)[i]);\r\n            }\r\n            \r\n            \r\n            \r\n\r\n            foreach (int Valeur in Fusion(Entiers1,Entiers2))\r\n            {\r\n                Console.WriteLine(Valeur);\r\n            }\r\n\r\n            foreach (int elements in triFusion(Entiers3))\r\n            {\r\n                Console.WriteLine(\"TriFusion : \" + elements);\r\n            }\r\n\r\n        }\r\n        \r\n        \r\n        \r\n        static List<string> CutString(char cutter, string sentencetocut) //Fonction répondant à la 1ère question\r\n        {\r\n            string cache = null;\r\n            List<string> CuttedString = new List<string>();\r\n            for (int i = 0; i < sentencetocut.Length; i++)\r\n            {\r\n                if (sentencetocut[i] != 'f')\r\n                {\r\n                    cache += sentencetocut[i].ToString();\r\n                }\r\n\r\n                else if (sentencetocut[i] == 'f')\r\n                {\r\n                    //Console.WriteLine(\"Cutted\");                  //Permet de voir quand la fonction cut la phrase\r\n                    CuttedString.Add(cache);\r\n                    cache = null;\r\n                }\r\n                //Console.WriteLine(i);                                //Permet de voir l'index\r\n            }\r\n            CuttedString.Add(cache);\r\n\r\n            return CuttedString;\r\n        }\r\n\r\n        static string ReverseSentence(string sentencetoreverse) // Fonction répondant à la 2ème question\r\n        {\r\n            string reversed = null;\r\n            for (int i = sentencetoreverse.Length -1; i >= 0; i--) // Inverse la phrase entière\r\n            {\r\n                reversed += sentencetoreverse[i];\r\n            }\r\n            return reversed;\r\n        }\r\n        \r\n        static string ReverseWordNotSentence(string sentenceword) // Fonction répondant à la 3ème question\r\n        {\r\n            string cache = null;\r\n            string reversed = null;\r\n            string result = null;\r\n            string lastchar;\r\n            for (int i = 0; i < sentenceword.Length; i++)  // découpe chaque mot grâce aux espaces\r\n            {\r\n                if (sentenceword[i] != ' ')\r\n                {\r\n                    cache += sentenceword[i].ToString();\r\n                }\r\n\r\n                else if (sentenceword[i] == ' ' && cache != null) // inverse les lettres des mots\r\n                {\r\n                    for (int y = cache.Length-1; y >= 0; y--)\r\n                        {\r\n                            reversed += cache[y];\r\n                        }\r\n\r\n                        cache = null;\r\n                        result += reversed + ' ';  // ajoute les mots inversés dans la phrase\r\n                        reversed = null;\r\n                }\r\n            }\r\n            if (cache != null)\r\n            {\r\n                for (int y = cache.Length-1; y >= 0; y--)  // permet d'ajouter le dernier mot dans certaines situations\r\n                {\r\n                    reversed += cache[y];\r\n                }\r\n\r\n                cache = null;\r\n                result += reversed + ' ';\r\n                reversed = null;\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        static string ReverseSentenceNotWord(string sentence) //Fonction répondant à la 4ème question\r\n        {\r\n            string result = null; //Le resultat\r\n            List<string> wordcache = new List<string>(); //On fais un 'cache' pour les mots\r\n            string cache = null; //Le cache pour un mot\r\n            \r\n            for (int i = 0; i < sentence.Length; i++) //Boucle for permettant de séparer les mots dans un string à part (dans la liste wordcache)\r\n            {\r\n                if (sentence[i] != ' ')\r\n                {\r\n                    cache += sentence[i];\r\n                }\r\n                else\r\n                {\r\n                    wordcache.Add(cache);\r\n                    cache = null;\r\n                }\r\n            }\r\n            wordcache.Add(cache); //Pour le dernier mot de la liste\r\n            cache = null;\r\n            for (int y = wordcache.Count-1; y >= 0 ; y--)\r\n            {\r\n                //Console.WriteLine(y);\r\n                result += wordcache[y];\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        static int SmallestIndex(int[] smallIndex)  // Fonction répondant à la 5ème question\r\n        {\r\n            int cache = smallIndex[0];\r\n            int index = 0; \r\n            for (int i = 0; i < smallIndex.Length; i++) // Boucle qui s'effectue pour le nombre d'entiers contenus dans le tableau\r\n            {\r\n                if (smallIndex[i] < cache)\r\n                {\r\n                    cache = smallIndex[i];                    // ajout du plus petit entier\r\n                    index = Array.IndexOf(smallIndex, cache);  // ajout de l'index du plus petit entier du tableau\r\n                }\r\n            }\r\n            return index;\r\n        }\r\n        \r\n        \r\n        static int[] SortBubble(int[] bubble) // Fonction répondant à la 6ème question\r\n        {\r\n            int cache1;\r\n            int cache2;\r\n            for (int i = 0; i < bubble.Length; i++)  \r\n            {                                                // les 2 boucles For permettent de faire le bon\r\n                for (int y = 0; y < bubble.Length; y++)      // nombre d'itérations pour la longueur du tableau\r\n                {\r\n                    if (y+1 != bubble.Length && bubble[y] > bubble[y+1])  //On vérifie si l'élément suivant est plus petit que l'élément actuel\r\n                    {\r\n                        cache1 = bubble[y];\r\n                        cache2 = bubble[y + 1];\r\n                        bubble[y] = cache2;                            //On inverse les 2 éléments\r\n                        bubble[y + 1] = cache1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return bubble;\r\n        }\r\n\r\n        \r\n        static int[] InsertionSort(int[] Arraytosort) //Réponse à l'exo 7\r\n        {\r\n            int cache = 0; //Cache du nombre au dessus (y+1)\r\n            for (int i = 0; i < Arraytosort.Length; i++) //Boucle permettant de répéter le triage \r\n            {\r\n                for (int y = 0; y < Arraytosort.Length; y++) //Boucle permettant le triage\r\n                {\r\n                    if (y+1 != Arraytosort.Length && Arraytosort[y] > Arraytosort[y + 1])\r\n                    {\r\n                        cache = Arraytosort[y + 1];\r\n                        Arraytosort[y + 1] = Arraytosort[y];\r\n                        Arraytosort[y] = cache;\r\n                        //Console.WriteLine(\"index\"+ y);\r\n                    }\r\n                }\r\n            }\r\n            return Arraytosort;\r\n        }\r\n        \r\n        static List<int> Fusion (List<int> entierA, List<int> entierB) //Fonction réponse à l'exo 8 INDEV\r\n        {\r\n            List<int> listfusion = new List<int>(); \r\n            if (entierA == null)\r\n            {\r\n                return entierB;\r\n            }\r\n            if (entierB == null)\r\n            {\r\n                return entierA;\r\n            }\r\n            if (entierA[1] <= entierB[1])\r\n            {\r\n                return new List<int>(){entierA[1]}.Concat(Fusion(new List<int>().AddRange(entierA.Skip(2)), entierB));\r\n                \r\n            }\r\n            else\r\n            {\r\n                return null;\r\n            }\r\n            \r\n        }\r\n        \r\n        static List<int> triFusion(List<int> listtocut) //Fonction réponse à l'exo 9\r\n        {\r\n            if (listtocut.Count <= 1)\r\n            {\r\n                return listtocut;\r\n            }\r\n            Console.WriteLine(\"in recursive\"+listtocut.Count);\r\n            \r\n            List<int> lista = new List<int>();\r\n            List<int> listb = new List<int>();\r\n            \r\n            int half = (listtocut.Count/2);\r\n            \r\n            for (int i = 0; i < half; i++)\r\n            {\r\n                lista.Add(listtocut[i]);\r\n                //Console.WriteLine(i);\r\n            }\r\n\r\n            for (int i = half; i < listtocut.Count; i++)\r\n            {\r\n                listb.Add(listtocut[i]);\r\n                //Console.WriteLine(i);\r\n            }\r\n            \r\n            lista = InsertionSort(lista.ToArray()).ToList();\r\n            listb = InsertionSort(listb.ToArray()).ToList();\r\n            \r\n            return Fusion(triFusion(lista),triFusion(listb));\r\n            \r\n            \r\n        }\r\n        \r\n        \r\n        \r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ROUILLARD_ERWANN_METTEN_OSCAR_TP/Program.cs	(revision d003ea64fc2aead909fadc254c7ad29ee3bd96e0)
+++ ROUILLARD_ERWANN_METTEN_OSCAR_TP/Program.cs	(date 1604564800799)
@@ -73,20 +73,20 @@
         
         static List<string> CutString(char cutter, string sentencetocut) //Fonction répondant à la 1ère question
         {
-            string cache = null;
+            string cache = "";
             List<string> CuttedString = new List<string>();
             for (int i = 0; i < sentencetocut.Length; i++)
             {
-                if (sentencetocut[i] != 'f')
+                if (sentencetocut[i] != cutter)
                 {
-                    cache += sentencetocut[i].ToString();
+                    cache += sentencetocut[i];
                 }
 
-                else if (sentencetocut[i] == 'f')
+                else if (sentencetocut[i] == cutter)
                 {
                     //Console.WriteLine("Cutted");                  //Permet de voir quand la fonction cut la phrase
                     CuttedString.Add(cache);
-                    cache = null;
+                    cache = "";
                 }
                 //Console.WriteLine(i);                                //Permet de voir l'index
             }
@@ -97,7 +97,7 @@
 
         static string ReverseSentence(string sentencetoreverse) // Fonction répondant à la 2ème question
         {
-            string reversed = null;
+            string reversed = "";
             for (int i = sentencetoreverse.Length -1; i >= 0; i--) // Inverse la phrase entière
             {
                 reversed += sentencetoreverse[i];
@@ -107,9 +107,9 @@
         
         static string ReverseWordNotSentence(string sentenceword) // Fonction répondant à la 3ème question
         {
-            string cache = null;
-            string reversed = null;
-            string result = null;
+            string cache = "";
+            string reversed = "";
+            string result = "";
             string lastchar;
             for (int i = 0; i < sentenceword.Length; i++)  // découpe chaque mot grâce aux espaces
             {
@@ -118,37 +118,37 @@
                     cache += sentenceword[i].ToString();
                 }
 
-                else if (sentenceword[i] == ' ' && cache != null) // inverse les lettres des mots
+                else if (sentenceword[i] == ' ' && cache != "") // inverse les lettres des mots
                 {
                     for (int y = cache.Length-1; y >= 0; y--)
                         {
                             reversed += cache[y];
                         }
 
-                        cache = null;
+                        cache = "";
                         result += reversed + ' ';  // ajoute les mots inversés dans la phrase
-                        reversed = null;
+                        reversed = "";
                 }
             }
-            if (cache != null)
+            if (cache != "")
             {
                 for (int y = cache.Length-1; y >= 0; y--)  // permet d'ajouter le dernier mot dans certaines situations
                 {
                     reversed += cache[y];
                 }
 
-                cache = null;
+                cache = "";
                 result += reversed + ' ';
-                reversed = null;
+                reversed = "";
             }
             return result;
         }
         
         static string ReverseSentenceNotWord(string sentence) //Fonction répondant à la 4ème question
         {
-            string result = null; //Le resultat
+            string result = ""; //Le resultat
             List<string> wordcache = new List<string>(); //On fais un 'cache' pour les mots
-            string cache = null; //Le cache pour un mot
+            string cache = ""; //Le cache pour un mot
             
             for (int i = 0; i < sentence.Length; i++) //Boucle for permettant de séparer les mots dans un string à part (dans la liste wordcache)
             {
@@ -159,11 +159,11 @@
                 else
                 {
                     wordcache.Add(cache);
-                    cache = null;
+                    cache = "";
                 }
             }
             wordcache.Add(cache); //Pour le dernier mot de la liste
-            cache = null;
+            cache = "";
             for (int y = wordcache.Count-1; y >= 0 ; y--)
             {
                 //Console.WriteLine(y);
